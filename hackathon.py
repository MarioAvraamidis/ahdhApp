# -*- coding: utf-8 -*-
"""Hackathon

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EgZAzMzNBtYKr-EWxP8A1tkTKxouqxRj

Εγκατάσταση βιβλιοθηκών
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -U -q 'google-genai>=1.19.0'
#!pip install ffmpeg
#pip install python-dotenv

"""Hackathon api key import"""
from dotenv import load_dotenv
import os

load_dotenv()                     # διαβάζει αυτόματα το .env
GOOGLE_API_KEY = os.getenv("HACKATHON_API_KEY")

# έλεγχος
if not GOOGLE_API_KEY:
    raise RuntimeError("Το GOOGLE_API_KEY δεν βρέθηκε στο .env")

from google import genai
from google.genai import types

client = genai.Client(api_key=GOOGLE_API_KEY)

MODEL_ID = "gemini-2.5-flash-preview-05-20" # @param ["gemini-2.5-flash-preview-05-20", "gemini-2.5-pro-preview-06-05", "gemini-2.0-flash-lite"] {"allow-input":true, isTemplate: true}

from IPython.display import Image, Markdown, Code, HTML
response = client.models.generate_content(
    model=MODEL_ID,
    contents= types.Content(
        parts=[
            types.Part(text="Return the text of the video, break it down to summarizing paragraphs."),
            types.Part(
                file_data=types.FileData(file_uri='https://www.youtube.com/watch?v=pZeYVnZVpFQ')
            )
        ]
    )
)

Markdown(response.text)

from IPython.display import Image, Markdown, Code, HTML
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch, UrlContext
prompt = """
Read the content of this page https://www.ethnos.gr/Politics/article/369546/diplomatikesphgesgiamarchtogazakalasthnygeiatoysoi42ellhnes, then create a summary of the content and break
it down to meaningful paragraphs.
"""

tools = []
tools.append(types.Tool(url_context=types.UrlContext))

config = types.GenerateContentConfig(
    tools=tools,
)

response = client.models.generate_content(
      contents=[prompt],
      model=MODEL_ID,
      config=config
)

Markdown(response.text)


import pathlib
import ffmpeg

def process_audio(
    audio_path: str | pathlib.Path,
    prompt: str = "Break down the audio",
    model_id: str = MODEL_ID,
) -> str:
    """
    Παίρνει τοπικό αρχείο ήχου, το ανεβάζει στο Gemini
    και επιστρέφει την απόκριση κειμένου.
    """
    audio_path = pathlib.Path(audio_path).expanduser().resolve()

    if not audio_path.exists():
        raise FileNotFoundError(f"Δεν βρέθηκε το αρχείο: {audio_path}")

    # 1) εξασφαλίζουμε MP4
    mp4_path = _ensure_mp4(audio_path)

    # 2) upload
    file_part = client.files.upload(file=mp4_path)

    # 3) κλήση μοντέλου
    resp = client.models.generate_content(
        model=model_id,
        contents=[
            file_part,
            prompt,
        ],
        # προαιρετικά: response_mime_type="text/plain"
    )
    return resp.text
   
# 1. Δείχνεις το δικό σου αρχείο
input_path  = pathlib.Path("20250613_101417.m4a")

# 3. Upload στο Gemini
file_part = client.files.upload(file=input_path)

# Ask Gemini about the video
response = client.models.generate_content(
    model=MODEL_ID,
    contents=[
        file_part,
        "Break down the audio",
    ]
)

Markdown(response.text)